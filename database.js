'use strict';

const Sequelize = require('sequelize');

/**
 *  The database class is a thin configuration wrapper over Sequelize with some utility functions
 *  for managing models and relationships.
 */
class Database {
  /**
   *  Uses the given database configuration to initialize Sequelize and set up the connection pool.
   *
   *  @param {object} config A configuration object containing database details whose properties will be merged
   *    into this instance.
   *  @param {object} config.logger A Bunyan logger to use.
   *  @param {string} config.sequelize.database The name of the database to use on the server.
   *  @param {string} config.sequelize.username The username to use on connection to the server.
   *  @param {string} config.sequelize.password The password to use on connection to the server.
   *  @param {string} config.sequelize.host The address of the database server to connect to.
   *  @param {string} config.sequelize.dialect The type of database we'll be using.
   *  @param {integer=} config.sequelize.port The port to use for the database connection.
   *  @param {boolean=} config.sequelize.logging If true, log SQL statements generated by the ORM.
   *  @param {object=} config.sequelize.pool Settings for maintaining persistent database connections.
   *  @param {integer=} config.sequelize.pool.max The maximum number of connections to have open at a time.
   *  @param {integer=} config.sequelize.pool.idle The number of milliseconds to allow a pooled connection to idle.
   *  @param {integer=} config.sequelize.pool.acquire The maximum number of milliseconds to wait for a connection.
   *  @param {boolean=} config.sequelize.operatorsAliases If true, only use only the new Sequelize operators.
   *  @param {object} models A map of Sequelize models to use.
   */
  constructor(config = {}, models = {}) {
    this.config = {
      sequelize: {},
      logger: undefined
    };
    Object.assign(this.config, config);

    this.sequelize = new Sequelize(config.sequelize);
    this.DataTypes = Sequelize;
    this.models = {};
    this.log = this.logger ? this.logger.child(__filename) : console;

    this.importModels(models);
  }

  /**
   *  Initialize models that were passed to the constructor. This is called by the constructor.
   *
   *  @param {object} models A map of models to construct.
   *  @returns {null} No return value.
   */
  importModels(models = {}) {
    for (const name in models) {
      try {
        this.models[name] = models[name](this.sequelize, this.DataTypes);
        this.log.debug(`Imported model: ${name}`);
      } catch (err) {
        this.log.error(err, `Failed to import model: ${name}`);
      }
    }
  }
}

module.exports = Database;
